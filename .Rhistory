a = 2 # alpha
beta = 0.0000462 # beta
s = seq(1e3, 3e4, 50) # spawners
r = a * s * exp(-beta * s)
max_rec = 1 / beta # maximum recruitment possible (conditioned on your density dependent factor)
# Define ricker function
f <- function(s, a, beta) return(a * s * exp(-beta * s))
# Find the derivative of f(s) with respect to s
derivative <- Deriv::Deriv(expression(a * s * exp(-beta * s)), "s")
# Solve
solution <- uniroot(function(s) eval(derivative, envir = list(s = s, a = a, beta = beta)) - 1, interval = c(1e3, 3e4))
# The solution is in solution$root
s_value <- solution$root
plot(s, r, xlab = "Spawners", ylab = "Recruits", lwd = 5, type = "l")
abline(0, 1, lty = 2) # replacement line
abline(v = s_value, lty = 2)
points(s[which.min(abs(s - s_value))], r[which.min(abs(s - s_value))])
abline(r[which.min(abs(s - s_value))], 1)
points(s[which.min(abs(s - s_value))], r[which.min(abs(s - s_value))], size = 3)
a = 2 # alpha
beta = 0.0000462 # beta
s = seq(1e3, 3e4, 50) # spawners
r = a * s * exp(-beta * s)
max_rec = 1 / beta # maximum recruitment possible (conditioned on your density dependent factor)
# Define ricker function
f <- function(s, a, beta) return(a * s * exp(-beta * s))
# Find the derivative of f(s) with respect to s
derivative <- Deriv::Deriv(expression(a * s * exp(-beta * s)), "s")
# Solve
solution <- uniroot(function(s) eval(derivative, envir = list(s = s, a = a, beta = beta)) - 1, interval = c(1e3, 3e4))
# The solution is in solution$root
s_value <- solution$root
plot(s, r, xlab = "Spawners", ylab = "Recruits", lwd = 5, type = "l")
abline(0, 1, lty = 2) # replacement line
abline(v = s_value, lty = 2)
abline(r[which.min(abs(s - s_value))], 1)
points(s[which.min(abs(s - s_value))], r[which.min(abs(s - s_value))], cex = 3)
a = 2 # alpha
beta = 0.0000462 # beta
s = seq(1e3, 3e4, 50) # spawners
r = a * s * exp(-beta * s)
max_rec = 1 / beta # maximum recruitment possible (conditioned on your density dependent factor)
# Define ricker function
f <- function(s, a, beta) return(a * s * exp(-beta * s))
# Find the derivative of f(s) with respect to s
derivative <- Deriv::Deriv(expression(a * s * exp(-beta * s)), "s")
# Solve
solution <- uniroot(function(s) eval(derivative, envir = list(s = s, a = a, beta = beta)) - 1, interval = c(1e3, 3e4))
# The solution is in solution$root
s_value <- solution$root
plot(s, r, xlab = "Spawners", ylab = "Recruits", lwd = 5, type = "l")
abline(0, 1, lty = 2) # replacement line
abline(v = s_value, lty = 2)
abline(r[which.min(abs(s - s_value))], 1)
points(s[which.min(abs(s - s_value))], r[which.min(abs(s - s_value))], cex = 3, pch = 18, col = "red")
abline(r[which.min(abs(s - s_value))] - 1, 1)
a = 2 # alpha
beta = 0.0000462 # beta
s = seq(1e3, 3e4, 50) # spawners
r = a * s * exp(-beta * s)
max_rec = 1 / beta # maximum recruitment possible (conditioned on your density dependent factor)
# Define ricker function
f <- function(s, a, beta) return(a * s * exp(-beta * s))
# Find the derivative of f(s) with respect to s
derivative <- Deriv::Deriv(expression(a * s * exp(-beta * s)), "s")
# Solve
solution <- uniroot(function(s) eval(derivative, envir = list(s = s, a = a, beta = beta)) - 1, interval = c(1e3, 3e4))
# The solution is in solution$root
s_value <- solution$root
plot(s, r, xlab = "Spawners", ylab = "Recruits", lwd = 5, type = "l")
abline(0, 1, lty = 2) # replacement line
abline(v = s_value, lty = 2)
abline(r[which.min(abs(s - s_value))] - r[which.min(abs(s - s_value))], 1)
points(s[which.min(abs(s - s_value))], r[which.min(abs(s - s_value))], cex = 3, pch = 18, col = "red")
a = 2 # alpha
beta = 0.0000462 # beta
s = seq(1e3, 3e4, 50) # spawners
r = a * s * exp(-beta * s)
max_rec = 1 / beta # maximum recruitment possible (conditioned on your density dependent factor)
# Define ricker function
f <- function(s, a, beta) return(a * s * exp(-beta * s))
# Find the derivative of f(s) with respect to s
derivative <- Deriv::Deriv(expression(a * s * exp(-beta * s)), "s")
# Solve
solution <- uniroot(function(s) eval(derivative, envir = list(s = s, a = a, beta = beta)) - 1, interval = c(1e3, 3e4))
# The solution is in solution$root
s_value <- solution$root
plot(s, r, xlab = "Spawners", ylab = "Recruits", lwd = 5, type = "l")
abline(0, 1, lty = 2) # replacement line
abline(v = s_value, lty = 2)
abline(r[which.min(abs(s - s_value))] - s[which.min(abs(s - s_value))], 1)
points(s[which.min(abs(s - s_value))], r[which.min(abs(s - s_value))], cex = 3, pch = 18, col = "red")
abline(r[which.min(abs(s - s_value))] - s[which.min(abs(s - s_value))], 1, lty = 2)
a = 2 # alpha
beta = 0.0000462 # beta
s = seq(1e3, 3e4, 50) # spawners
r = a * s * exp(-beta * s)
max_rec = 1 / beta # maximum recruitment possible (conditioned on your density dependent factor)
# Define ricker function
f <- function(s, a, beta) return(a * s * exp(-beta * s))
# Find the derivative of f(s) with respect to s
derivative <- Deriv::Deriv(expression(a * s * exp(-beta * s)), "s")
# Solve
solution <- uniroot(function(s) eval(derivative, envir = list(s = s, a = a, beta = beta)) - 1, interval = c(1e3, 3e4))
# The solution is in solution$root
s_value <- solution$root
plot(s, r, xlab = "Spawners", ylab = "Recruits", lwd = 5, type = "l")
abline(0, 1, lty = 2) # replacement line
abline(v = s_value, lty = 2)
abline(r[which.min(abs(s - s_value))] - s[which.min(abs(s - s_value))], 1, lty = 2)
points(s[which.min(abs(s - s_value))], r[which.min(abs(s - s_value))], cex = 3, pch = 18, col = "red")
a = 2 # alpha
beta = 0.0000462 # beta
s = seq(1e3, 3e4, 50) # spawners
r = a * s * exp(-beta * s)
max_rec = 1 / beta # maximum recruitment possible (conditioned on your density dependent factor)
# Define ricker function
f <- function(s, a, beta) return(a * s * exp(-beta * s))
# Find the derivative of f(s) with respect to s
derivative <- Deriv::Deriv(expression(a * s * exp(-beta * s)), "s")
# Solve
solution <- uniroot(function(s) eval(derivative, envir = list(s = s, a = a, beta = beta)) - 1, interval = c(1e3, 3e4))
# The solution is in solution$root
s_value <- solution$root
plot(s, r, xlab = "Spawners", ylab = "Recruits", lwd = 3, type = "l")
abline(0, 1, lty = 2) # replacement line
abline(v = s_value, lty = 2)
abline(r[which.min(abs(s - s_value))] - s[which.min(abs(s - s_value))], 1, lty = 2) # m = r - s
points(s[which.min(abs(s - s_value))], r[which.min(abs(s - s_value))], cex = 3, pch = 18, col = "red")
par(mfrow = c(1,2))
plot(s, r, xlab = "Spawners", ylab = "Recruits", lwd = 3, type = "l", main = "Ricker Model w/ replacement line and point at MSC")
abline(0, 1, lty = 2) # replacement line
abline(v = s_value, lty = 2)
abline(r[which.min(abs(s - s_value))] - s[which.min(abs(s - s_value))], 1, lty = 2) # m = r - s
points(s[which.min(abs(s - s_value))], r[which.min(abs(s - s_value))], cex = 3, pch = 18, col = "red")
plot(s, r - s)
plot(s, r - s, type = "l")
plot(s, r - s, type = "l",
xlab = "Spawners", ylab = "m (R-S)", lwd = 3, type = "l")
a = 2 # alpha
beta = 0.0000462 # beta
s = seq(1e3, 3e4, 50) # spawners
r = a * s * exp(-beta * s)
max_rec = 1 / beta # maximum recruitment possible (conditioned on your density dependent factor)
# Define ricker function
f <- function(s, a, beta) return(a * s * exp(-beta * s))
# Find the derivative of f(s) with respect to s
derivative <- Deriv::Deriv(expression(a * s * exp(-beta * s)), "s")
# Solve
solution <- uniroot(function(s) eval(derivative, envir = list(s = s, a = a, beta = beta)) - 1, interval = c(1e3, 3e4))
# The solution is in solution$root
s_value <- solution$root
par(mfrow = c(1,2))
plot(s, r, xlab = "Spawners", ylab = "Recruits", lwd = 3, type = "l", main = "Ricker Model w/ replacement line and point at MSC")
abline(0, 1, lty = 2) # replacement line
abline(v = s_value, lty = 2)
abline(r[which.min(abs(s - s_value))] - s[which.min(abs(s - s_value))], 1, lty = 2) # m = r - s
points(s[which.min(abs(s - s_value))], r[which.min(abs(s - s_value))], cex = 3, pch = 18, col = "red")
plot(s, r - s, type = "l", xlab = "Spawners", ylab = "m (R-S)", lwd = 3, type = "l")
a = 2 # alpha
beta = 0.0000462 # beta
s = seq(1e3, 3e4, 50) # spawners
r = a * s * exp(-beta * s)
max_rec = 1 / beta # maximum recruitment possible (conditioned on your density dependent factor)
# Define ricker function
f <- function(s, a, beta) return(a * s * exp(-beta * s))
# Find the derivative of f(s) with respect to s
derivative <- Deriv::Deriv(expression(a * s * exp(-beta * s)), "s")
# Solve
solution <- uniroot(function(s) eval(derivative, envir = list(s = s, a = a, beta = beta)) - 1, interval = c(1e3, 3e4))
# The solution is in solution$root
s_value <- solution$root
par(mfrow = c(1,2))
plot(s, r, xlab = "Spawners", ylab = "Recruits", lwd = 3, type = "l", main = "Ricker Model w/ replacement line and point at MSC")
abline(0, 1, lty = 2) # replacement line
abline(v = s_value, lty = 2)
abline(r[which.min(abs(s - s_value))] - s[which.min(abs(s - s_value))], 1, lty = 2) # m = r - s
points(s[which.min(abs(s - s_value))], r[which.min(abs(s - s_value))], cex = 3, pch = 18, col = "red")
plot(s, r - s, type = "l", xlab = "Spawners", ylab = "m (R-S)", lwd = 3)
abline(v = s_value, lty = 2)
abline(h = 0)
a = 2 # alpha
beta = 0.0000462 # beta
s = seq(1e3, 3e4, 50) # spawners
r = a * s * exp(-beta * s)
max_rec = 1 / beta # maximum recruitment possible (conditioned on your density dependent factor)
# Define ricker function
f <- function(s, a, beta) return(a * s * exp(-beta * s))
# Find the derivative of f(s) with respect to s
derivative <- Deriv::Deriv(expression(a * s * exp(-beta * s)), "s")
# Solve
solution <- uniroot(function(s) eval(derivative, envir = list(s = s, a = a, beta = beta)) - 1, interval = c(1e3, 3e4))
# The solution is in solution$root
s_value <- solution$root
par(mfrow = c(1,2))
plot(s, r, xlab = "Spawners", ylab = "Recruits", lwd = 3, type = "l", main = "Ricker Model w/ replacement line and point at MSC")
abline(0, 1, lty = 2) # replacement line
abline(v = s_value, lty = 2)
abline(r[which.min(abs(s - s_value))] - s[which.min(abs(s - s_value))], 1, lty = 2) # m = r - s
points(s[which.min(abs(s - s_value))], r[which.min(abs(s - s_value))], cex = 3, pch = 18, col = "red")
plot(s, r - s, type = "l", xlab = "Spawners", ylab = "m  = (R-S)", lwd = 3)
abline(v = s_value, lty = 2)
abline(h = 0, lty = 2)
a = 2 # alpha
beta = 0.0000462 # beta
s = seq(1e3, 3e4, 50) # spawners
r = a * s * exp(-beta * s)
max_rec = 1 / beta # maximum recruitment possible (conditioned on your density dependent factor)
# Define ricker function
f <- function(s, a, beta) return(a * s * exp(-beta * s))
# Find the derivative of f(s) with respect to s
derivative <- Deriv::Deriv(expression(a * s * exp(-beta * s)), "s")
# Solve
solution <- uniroot(function(s) eval(derivative, envir = list(s = s, a = a, beta = beta)) - 1, interval = c(1e3, 3e4))
# The solution is in solution$root
s_value <- solution$root
par(mfrow = c(1,2))
plot(s, r, xlab = "Spawners", ylab = "Recruits", lwd = 3, type = "l", main = "Ricker Model w/ replacement line and point at MSC")
abline(0, 1, lty = 2) # replacement line
abline(v = s_value, lty = 2)
abline(r[which.min(abs(s - s_value))] - s[which.min(abs(s - s_value))], 1, lty = 2) # m = r - s
points(s[which.min(abs(s - s_value))], r[which.min(abs(s - s_value))], cex = 3, pch = 18, col = "red")
plot(s, r - s, type = "l", xlab = "Spawners", ylab = "m  = (R-S)", lwd = 3)
abline(v = s_value, lty = 2, main = "Point at which MSC")
abline(h = 0, lty = 2)
a = 2 # alpha
beta = 0.0000462 # beta
s = seq(1e3, 3e4, 50) # spawners
r = a * s * exp(-beta * s)
max_rec = 1 / beta # maximum recruitment possible (conditioned on your density dependent factor)
# Define ricker function
f <- function(s, a, beta) return(a * s * exp(-beta * s))
# Find the derivative of f(s) with respect to s
derivative <- Deriv::Deriv(expression(a * s * exp(-beta * s)), "s")
# Solve
solution <- uniroot(function(s) eval(derivative, envir = list(s = s, a = a, beta = beta)) - 1, interval = c(1e3, 3e4))
# The solution is in solution$root
s_value <- solution$root
par(mfrow = c(1,2))
plot(s, r, xlab = "Spawners", ylab = "Recruits", lwd = 3, type = "l", main = "Ricker Model w/ replacement line and point at MSC")
abline(0, 1, lty = 2) # replacement line
abline(v = s_value, lty = 2)
abline(r[which.min(abs(s - s_value))] - s[which.min(abs(s - s_value))], 1, lty = 2) # m = r - s
points(s[which.min(abs(s - s_value))], r[which.min(abs(s - s_value))], cex = 3, pch = 18, col = "red")
plot(s, r - s, type = "l", xlab = "Spawners", ylab = "m  = (R-S)", lwd = 3, main = "Point at which MSC occurs")
abline(v = s_value, lty = 2)
abline(h = 0, lty = 2)
a = 2 # alpha
beta = 0.0000462 # beta
s = seq(1e3, 3e4, 50) # spawners
r = a * s * exp(-beta * s)
max_rec = 1 / beta # maximum recruitment possible (conditioned on your density dependent factor)
# Define ricker function
f <- function(s, a, beta) return(a * s * exp(-beta * s))
# Find the derivative of f(s) with respect to s
derivative <- Deriv::Deriv(expression(a * s * exp(-beta * s)), "s")
# Solve
solution <- uniroot(function(s) eval(derivative, envir = list(s = s, a = a, beta = beta)) - 1, interval = c(1e3, 3e4))
# The solution is in solution$root
s_value <- solution$root
par(mfrow = c(1,2))
plot(s, r, xlab = "Spawners", ylab = "Recruits", lwd = 3, type = "l", main = "Ricker Model w/ replacement line and point at MSC")
abline(0, 1, lty = 2) # replacement line
abline(v = s_value, lty = 2)
abline(r[which.min(abs(s - s_value))] - s[which.min(abs(s - s_value))], 1, lty = 2) # m = r - s
points(s[which.min(abs(s - s_value))], r[which.min(abs(s - s_value))], cex = 3, pch = 18, col = "red")
plot(s, r - s, type = "l", xlab = "Spawners", ylab = "m  = (R-S)", lwd = 3, main = "Point at which MSC occurs")
abline(v = s_value, lty = 2)
points(s, max(r - s), cex = 3, pch = 18, col = "red")
abline(h = 0, lty = 2)
max(r - s)
s
(r - s
r - s
points(s[which.max(r-s)], max(r - s), cex = 3, pch = 18, col = "red")
par(mfrow = c(1,2))
plot(s, r, xlab = "Spawners", ylab = "Recruits", lwd = 3, type = "l", main = "Ricker Model w/ replacement line and point at MSC")
abline(0, 1, lty = 2) # replacement line
abline(v = s_value, lty = 2)
abline(r[which.min(abs(s - s_value))] - s[which.min(abs(s - s_value))], 1, lty = 2) # m = r - s
points(s[which.min(abs(s - s_value))], r[which.min(abs(s - s_value))], cex = 3, pch = 18, col = "red")
plot(s, r - s, type = "l", xlab = "Spawners", ylab = "m  = (R-S)", lwd = 3, main = "Point at which MSC occurs")
abline(v = s_value, lty = 2)
points(s[which.max(r-s)], max(r - s), cex = 3, pch = 18, col = "red")
abline(h = 0, lty = 2)
bookdown::render_book("index.Rmd")
bookdown::render_book('index.Rmd')
bookdown::render_book("index.Rmd")
